@require '../tools/mixins'

/*------------------------------------*\
  Text utilities
\*------------------------------------*/

$error
    color  var(--pomegranate)

$valid
    color  var(--emerald)

$warn
    color  var(--texasRose)

colors=json('../settings/palette.json', { hash: true })

for color in keys(colors)
    $color-{color}
        color: lookup(color) !important // @stylint ignore

    global('.u-' + color, '$color-' + color)


$breakword
    word-break break-word

$ellipsis
    white-space nowrap
    overflow hidden
    text-overflow ellipsis

$midellipsis
    display flex
    flex-wrap nowrap

    > * // @stylint ignore
        display inline-block
        max-width 50%
        overflow hidden
        white-space pre

    > :first-child
        text-overflow ellipsis

    > :last-child
        text-overflow clip
        direction rtl

    @supports(text-overflow: '[...]')
        > :first-child
            text-overflow '[...]'

// @stylint off
fz-tiny()
    font-size rem(12)!important
    line-height 1.3!important

fz-xsmall()
    font-size rem(13)!important
    line-height 1.4!important

fz-small()
    font-size rem(14)!important
    line-height 1.4!important

fz-medium()
    font-size rem(16)!important
    line-height 1.5!important

fz-large()
    font-size rem(18)!important
    line-height 1.5!important

fontsize = {
    'fz-tiny': 'fz-tiny',
    'fz-xsmall': 'fz-xsmall',
    'fz-small': 'fz-small',
    'fz-medium': 'fz-medium',
    'fz-large': 'fz-large'
}

if cssmodules == true
    cssModulesUtils(fontsize, breakpoints)
else
    nativeUtils(fontsize, breakpoints)

ta-left()
    text-align left!important

ta-right()
    text-align right!important

ta-center()
    text-align center!important

ta-justify()
    text-align justify!important

textalign = {
    'ta-left': 'ta-left',
    'ta-right': 'ta-right',
    'ta-center': 'ta-center',
    'ta-justify': 'ta-justify'
}

if cssmodules == true
    cssModulesUtils(textalign, breakpoints)
else
    nativeUtils(textalign, breakpoints)

fs-normal()
    font-style normal!important

fs-italic()
    font-style italic!important

fontstyle = {
    'fs-normal': 'fs-normal',
    'fs-italic': 'fs-italic'
}

if cssmodules == true
    cssModulesUtils(fontstyle, breakpoints)
else
    nativeUtils(fontstyle, breakpoints)
// @stylint on

// Global classes
global('.u-error', $error)
global('.u-valid', $valid)
global('.u-warn', $warn)
global('.u-breakword', $breakword)
global('.u-ellipsis', $ellipsis)
global('.u-midellipsis', $midellipsis)
